#include "GRNMPCH.H"
#include "OUTPUTPATHDIALOG.H"
//////////////////////////////////////////////////////////////////////////
CSelectOutputPathDialogsHandler::CSelectOutputPathDialogsHandler(VOID){

}
//////////////////////////////////////////////////////////////////////////
CSelectOutputPathDialogsHandler::~CSelectOutputPathDialogsHandler(VOID){

}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnFileOk(IFileDialog* pfd){
	return S_OK;    // allow the dialog to close
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnFolderChanging(IFileDialog* pfd,IShellItem* psiFolder){
	return S_OK;    // allow the change
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnFolderChange(IFileDialog* pfd){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnSelectionChange(IFileDialog* pfd){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnShareViolation(IFileDialog* pfd,IShellItem* psi,FDE_SHAREVIOLATION_RESPONSE* pResponse){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnTypeChange(IFileDialog* pfd){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnOverwrite(IFileDialog* pfd,IShellItem* psi,FDE_OVERWRITE_RESPONSE* pResponse){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
// IFileDialogControlEvents methods
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnItemSelected(IFileDialogCustomize* pfdc,DWORD dwIDCtl,DWORD dwIDItem){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnButtonClicked(IFileDialogCustomize* pfdc,DWORD dwIDCtl){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnCheckButtonToggled(IFileDialogCustomize* pfdc,DWORD dwIDCtl,BOOL bChecked){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CSelectOutputPathDialogsHandler::OnControlActivating(IFileDialogCustomize* pfdc,DWORD dwIDCtl){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
BOOL SelectOutputPathWithIFileOpenDialogEx(CString& OutputPath){

	//////////////////////////////////////////////////////////////////////////
	HRESULT hr;
	CComPtr<IFileOpenDialog> pDlg;
	//////////////////////////////////////////////////////////////////////////
	DWORD dwFlags=0;
	//////////////////////////////////////////////////////////////////////////
	CString strTitle;
	CString strOKButton;
	CString strDefaultExtention;
	CString strFileNameLable;
	//////////////////////////////////////////////////////////////////////////
	strTitle.LoadString(IDS_SELECT_OUTPUT_FOLDER);
	strOKButton.LoadString(IDS_SELECT_OUTPUT_FOLDER_OK_BUTTON);
	strDefaultExtention.LoadString(IDS_SELECT_OUTPUT_FOLDER_DEFAULT);
	strFileNameLable.LoadString(IDS_SELECT_OUTPUT_FOLDER_LABLE);
	//////////////////////////////////////////////////////////////////////////
	hr=pDlg.CoCreateInstance(__uuidof(FileOpenDialog));
	//////////////////////////////////////////////////////////////////////////
	if(FAILED(hr)){
		return FALSE;
	}
	//////////////////////////////////////////////////////////////////////////
	static const GUID guidFileSave=SELECT_OUTPUT_PATH_GUID;
	hr=pDlg->SetClientGuid(guidFileSave);
	//////////////////////////////////////////////////////////////////////////
	pDlg->SetTitle(strTitle);
	pDlg->SetOkButtonLabel(strOKButton);
	pDlg->SetDefaultExtension(strDefaultExtention);
	pDlg->SetFileNameLabel(strFileNameLable);
	hr=pDlg->SetFileName(L"");
	hr=pDlg->SetOptions(FOS_PICKFOLDERS|FOS_SHAREAWARE|/*FOS_NOREADONLYRETURN|*/FOS_PATHMUSTEXIST|FOS_FORCEFILESYSTEM);
	//////////////////////////////////////////////////////////////////////////
	// Set up our event listener.											//
	//////////////////////////////////////////////////////////////////////////
	CComObjectStackEx<CSelectOutputPathDialogsHandler> cbk;
	CComQIPtr<IFileDialogEvents> pEvents=cbk.GetUnknown();
	DWORD dwCookie;
	bool bAdvised;
	//////////////////////////////////////////////////////////////////////////
	hr=pDlg->Advise(pEvents,&dwCookie);
	bAdvised=SUCCEEDED(hr);
	//////////////////////////////////////////////////////////////////////////
	// Set an IFileDialogCustomize interface.								//
	//////////////////////////////////////////////////////////////////////////
	CComQIPtr<IFileDialogCustomize> pfdc=pDlg;
	//////////////////////////////////////////////////////////////////////////
	if(pfdc){

	}
	//////////////////////////////////////////////////////////////////////////
	hr=pDlg->Show(NULL);
	//////////////////////////////////////////////////////////////////////////
	if(bAdvised){
		pDlg->Unadvise(dwCookie);
	}
	//////////////////////////////////////////////////////////////////////////
	if(SUCCEEDED(hr)){
		//////////////////////////////////////////////////////////////////////////
		CComPtr<IShellItem> pItem;
		hr=pDlg->GetResult(&pItem);
		//////////////////////////////////////////////////////////////////////////
		if(SUCCEEDED(hr)){
	
			//////////////////////////////////////////////////////////////////////////
			CString sPath;
			if(PathFromShellItem(pItem,sPath)==true){
				OutputPath=sPath;
				return TRUE;
			}
			//////////////////////////////////////////////////////////////////////////

		}
		//////////////////////////////////////////////////////////////////////////

	}
	//////////////////////////////////////////////////////////////////////////
	return FALSE;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////




