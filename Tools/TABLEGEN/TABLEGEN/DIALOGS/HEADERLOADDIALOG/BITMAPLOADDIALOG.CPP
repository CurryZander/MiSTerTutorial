#include "GRNMPCH.H"
#include "BITMAPLOADDIALOG.H"
//////////////////////////////////////////////////////////////////////////
CLoadBitmapFilesDialogsHandler::CLoadBitmapFilesDialogsHandler(VOID){

}
//////////////////////////////////////////////////////////////////////////
CLoadBitmapFilesDialogsHandler::~CLoadBitmapFilesDialogsHandler(VOID){

}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnFileOk(IFileDialog* pfd){
	return S_OK;    // allow the dialog to close
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnFolderChanging(IFileDialog* pfd,IShellItem* psiFolder){
	return S_OK;    // allow the change
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnFolderChange(IFileDialog* pfd){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnSelectionChange(IFileDialog* pfd){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnShareViolation(IFileDialog* pfd,IShellItem* psi,FDE_SHAREVIOLATION_RESPONSE* pResponse){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnTypeChange(IFileDialog* pfd){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnOverwrite(IFileDialog* pfd,IShellItem* psi,FDE_OVERWRITE_RESPONSE* pResponse){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
// IFileDialogControlEvents methods
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnItemSelected(IFileDialogCustomize* pfdc,DWORD dwIDCtl,DWORD dwIDItem){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnButtonClicked(IFileDialogCustomize* pfdc,DWORD dwIDCtl){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnCheckButtonToggled(IFileDialogCustomize* pfdc,DWORD dwIDCtl,BOOL bChecked){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
STDMETHODIMP CLoadBitmapFilesDialogsHandler::OnControlActivating(IFileDialogCustomize* pfdc,DWORD dwIDCtl){
	return S_OK;
}
//////////////////////////////////////////////////////////////////////////
BOOL LoadBitmapFiletWithIFileOpenDlgEx(CString& FilePath){

	//////////////////////////////////////////////////////////////////////////
	FilePath = _T("");
	//////////////////////////////////////////////////////////////////////////
	HRESULT hr;
	CComPtr<IFileOpenDialog> pDlg;
	//////////////////////////////////////////////////////////////////////////
	vector<CString> vecsFilterParts;
	vector<COMDLG_FILTERSPEC> vecFilters;
	//////////////////////////////////////////////////////////////////////////
	DWORD dwFlags=0;
	//////////////////////////////////////////////////////////////////////////
	CString strTitle;
	CString strOKButton;
	CString strDefaultExtention;
	CString strFileNameLable;
	//////////////////////////////////////////////////////////////////////////
	strTitle.LoadString(IDS_LOAD_BITMAP);
	strOKButton.LoadString(IDS_LOAD_BITMAP_FILES_OK_BUTTON);
	strDefaultExtention.LoadString(IDS_LOAD_BITMAP_FILES_DEFAULT);
	strFileNameLable.LoadString(IDS_LOAD_BITMAP_FILES_LABLE);
	//////////////////////////////////////////////////////////////////////////
	hr=pDlg.CoCreateInstance(__uuidof(FileOpenDialog));
	//////////////////////////////////////////////////////////////////////////
	if(FAILED(hr)){
		return FALSE;
	}
	//////////////////////////////////////////////////////////////////////////
	static const GUID guidFileSave= BITMAP_LOAD_FILES_GUID;
	hr=pDlg->SetClientGuid(guidFileSave);
	//////////////////////////////////////////////////////////////////////////
	if(BuildFilterSpecList(IDS_LOAD_BITMAP_FILES_FILTERS,vecsFilterParts,vecFilters)){
		hr=pDlg->SetFileTypes((UINT)vecFilters.size(),&vecFilters[0]);
	}
	//////////////////////////////////////////////////////////////////////////
	pDlg->SetTitle(strTitle);
	pDlg->SetOkButtonLabel(strOKButton);
	pDlg->SetDefaultExtension(strDefaultExtention);
	pDlg->SetFileNameLabel(strFileNameLable);
	hr=pDlg->SetFileName(L"");
// 	hr=pDlg->GetOptions(&dwFlags);
	hr=pDlg->SetOptions(/*dwFlags|*//*FOS_OVERWRITEPROMPT|FOS_CREATEPROMPT|*/FOS_SHAREAWARE|/*FOS_NOREADONLYRETURN|*/FOS_FORCEPREVIEWPANEON|FOS_PATHMUSTEXIST|FOS_FORCEFILESYSTEM/*|FOS_ALLOWMULTISELECT*/);
	//////////////////////////////////////////////////////////////////////////
	// Set up our event listener.											//
	//////////////////////////////////////////////////////////////////////////
	CComObjectStackEx<CLoadBitmapFilesDialogsHandler> cbk;
	CComQIPtr<IFileDialogEvents> pEvents=cbk.GetUnknown();
	DWORD dwCookie;
	bool bAdvised;
	//////////////////////////////////////////////////////////////////////////
	hr=pDlg->Advise(pEvents,&dwCookie);
	bAdvised=SUCCEEDED(hr);
	//////////////////////////////////////////////////////////////////////////
	// Set an IFileDialogCustomize interface.								//
	//////////////////////////////////////////////////////////////////////////
	CComQIPtr<IFileDialogCustomize> pfdc=pDlg;
	//////////////////////////////////////////////////////////////////////////
	if(pfdc){

	}
	//////////////////////////////////////////////////////////////////////////
	hr=pDlg->Show(NULL);
	//////////////////////////////////////////////////////////////////////////
	if(bAdvised){
		pDlg->Unadvise(dwCookie);
	}
	//////////////////////////////////////////////////////////////////////////
	if(SUCCEEDED(hr)){
		//////////////////////////////////////////////////////////////////////////
		CComPtr<IShellItem> pItem;
		hr=pDlg->GetResult(&pItem);
		//////////////////////////////////////////////////////////////////////////
		if(SUCCEEDED(hr)){
			CString sPath;
			if(PathFromShellItem(pItem,sPath)==true){
				FilePath = sPath;
			}
		}
		//////////////////////////////////////////////////////////////////////////
		return TRUE;
		//////////////////////////////////////////////////////////////////////////
	}
	//////////////////////////////////////////////////////////////////////////
	return FALSE;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
BOOL LoadBinaryFiletWithIFileOpenDlgEx(CString& FilePath) {

	//////////////////////////////////////////////////////////////////////////
	FilePath = _T("");
	//////////////////////////////////////////////////////////////////////////
	HRESULT hr;
	CComPtr<IFileOpenDialog> pDlg;
	//////////////////////////////////////////////////////////////////////////
	vector<CString> vecsFilterParts;
	vector<COMDLG_FILTERSPEC> vecFilters;
	//////////////////////////////////////////////////////////////////////////
	DWORD dwFlags = 0;
	//////////////////////////////////////////////////////////////////////////
	CString strTitle;
	CString strOKButton;
	CString strDefaultExtention;
	CString strFileNameLable;
	//////////////////////////////////////////////////////////////////////////
	strTitle.LoadString(IDS_LOAD_BINARY);
	strOKButton.LoadString(IDS_LOAD_BINARY_FILE_OK_BUTTON);
	strDefaultExtention.LoadString(IDS_LOAD_BINARY_FILE_DEFAULT);
	strFileNameLable.LoadString(IDS_LOAD_BINARY_FILE_LABLE);
	//////////////////////////////////////////////////////////////////////////
	hr = pDlg.CoCreateInstance(__uuidof(FileOpenDialog));
	//////////////////////////////////////////////////////////////////////////
	if (FAILED(hr)) {
		return FALSE;
	}
	//////////////////////////////////////////////////////////////////////////
	static const GUID guidFileSave = BITMAP_LOAD2_FILES_GUID;
	hr = pDlg->SetClientGuid(guidFileSave);
	//////////////////////////////////////////////////////////////////////////
	if (BuildFilterSpecList(IDS_BIN_FILE_FILTERS, vecsFilterParts, vecFilters)) {
		hr = pDlg->SetFileTypes((UINT)vecFilters.size(), &vecFilters[0]);
	}
	//////////////////////////////////////////////////////////////////////////
	pDlg->SetTitle(strTitle);
	pDlg->SetOkButtonLabel(strOKButton);
	pDlg->SetDefaultExtension(strDefaultExtention);
	pDlg->SetFileNameLabel(strFileNameLable);
	hr = pDlg->SetFileName(L"");
	// 	hr=pDlg->GetOptions(&dwFlags);
	hr = pDlg->SetOptions(/*dwFlags|*//*FOS_OVERWRITEPROMPT|FOS_CREATEPROMPT|*/FOS_SHAREAWARE |/*FOS_NOREADONLYRETURN|*/FOS_FORCEPREVIEWPANEON | FOS_PATHMUSTEXIST | FOS_FORCEFILESYSTEM/*|FOS_ALLOWMULTISELECT*/);
	//////////////////////////////////////////////////////////////////////////
	// Set up our event listener.											//
	//////////////////////////////////////////////////////////////////////////
	CComObjectStackEx<CLoadBitmapFilesDialogsHandler> cbk;
	CComQIPtr<IFileDialogEvents> pEvents = cbk.GetUnknown();
	DWORD dwCookie;
	bool bAdvised;
	//////////////////////////////////////////////////////////////////////////
	hr = pDlg->Advise(pEvents, &dwCookie);
	bAdvised = SUCCEEDED(hr);
	//////////////////////////////////////////////////////////////////////////
	// Set an IFileDialogCustomize interface.								//
	//////////////////////////////////////////////////////////////////////////
	CComQIPtr<IFileDialogCustomize> pfdc = pDlg;
	//////////////////////////////////////////////////////////////////////////
	if (pfdc) {

	}
	//////////////////////////////////////////////////////////////////////////
	hr = pDlg->Show(NULL);
	//////////////////////////////////////////////////////////////////////////
	if (bAdvised) {
		pDlg->Unadvise(dwCookie);
	}
	//////////////////////////////////////////////////////////////////////////
	if (SUCCEEDED(hr)) {
		//////////////////////////////////////////////////////////////////////////
		CComPtr<IShellItem> pItem;
		hr = pDlg->GetResult(&pItem);
		//////////////////////////////////////////////////////////////////////////
		if (SUCCEEDED(hr)) {
			CString sPath;
			if (PathFromShellItem(pItem, sPath) == true) {
				FilePath = sPath;
			}
		}
		//////////////////////////////////////////////////////////////////////////
		return TRUE;
		//////////////////////////////////////////////////////////////////////////
	}
	//////////////////////////////////////////////////////////////////////////
	return FALSE;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////










