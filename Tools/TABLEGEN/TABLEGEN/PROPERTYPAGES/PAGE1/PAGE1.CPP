#include "GRNMPCH.H"
#include "PAGE1.H"
//////////////////////////////////////////////////////////////////////////
#include "../../DIALOGS/LOADLISTDIALOG/LOADLISTDIALOG.H"
#include "../../DIALOGS/SAVELISTDIALOG/SAVELISTDIALOG.H"
#include "../../DIALOGS/HEADERLOADDIALOG/BITMAPLOADDIALOG.H"
#include "../../UTILITIES/GROWABLEARRAY.H"
#include "../../PROCESSING/PROCESSING.H"
//////////////////////////////////////////////////////////////////////////
CPropertyPage1::CPropertyPage1(CString& outputfile, UINT64& id,BOOL& binary, BOOL& verilog,BOOL& wordsize,BOOL& endian,ATL::_U_STRINGorID title,bool IsExterior,bool EnableDoubleBuffer):
baseClass(title,IsExterior,EnableDoubleBuffer),
m_InfoStatic(),
m_TableTypeId(id),
m_OutputFileName(outputfile),
m_A_text(),
m_B_text(),
m_C_text(),
m_D_text(),
m_A_text_lable(),
m_B_text_lable(),
m_C_text_lable(),
m_D_text_lable(),
m_A_button(),
m_B_button(),
m_C_button(),
m_D_button(),
m_Sine_max_value(),
m_Initialized(FALSE),
m_Binary(binary),
m_Verilog(verilog),
m_16Bit(wordsize),
m_endian(endian)
{

}
//////////////////////////////////////////////////////////////////////////
CPropertyPage1::~CPropertyPage1(VOID)
{

}
//////////////////////////////////////////////////////////////////////////
int CPropertyPage1::OnSetActive(VOID)
{
	//////////////////////////////////////////////////////////////////////////
	GetPropertySheet().SetWizardButtons(PSWIZB_BACK|PSWIZB_FINISH);
	//////////////////////////////////////////////////////////////////////////
	return TRUE;
	//////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////
BOOL CPropertyPage1::OnQueryCancel(VOID)
{
	//////////////////////////////////////////////////////////////////////////
	return FALSE;
	//////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////
INT_PTR CPropertyPage1::OnWizardFinish(VOID)
{
	//////////////////////////////////////////////////////////////////////////
	//FINISH COMMAND														//
	//////////////////////////////////////////////////////////////////////////
	switch (m_TableTypeId)
	{
	case 0:
	{
		//////////////////////////////////////////////////////////////////////////
		//PLANE BITMAP IMAGE													//
		//////////////////////////////////////////////////////////////////////////
		CString inputfilenamepath;
		m_A_text.GetWindowText(inputfilenamepath);
		m_InputFileName = inputfilenamepath;
		_AppSettings.WriteUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_KEY_PATH_KEY, inputfilenamepath);
		if (ProcBitmap(m_OutputFileName, m_InputFileName) == FALSE) {
			::MessageBoxW(NULL, L"Error processing bitmap file.", L"Error", MB_ICONASTERISK | MB_OK);
			return FALSE;
		}
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	case 1:
	{
		//////////////////////////////////////////////////////////////////////////
		//SINE WAVE																//
		//////////////////////////////////////////////////////////////////////////
		CString txt;
		m_A_text.GetWindowText(txt);
		_AppSettings.WriteUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MAX_VALUE_KEY, txt);
		m_B_text.GetWindowText(txt);
		_AppSettings.WriteUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MID_VALUE_KEY, txt);
		if (ProcSineWave(m_OutputFileName, m_Sine_max_value,m_Sine_mid_value) == FALSE) {
			::MessageBoxW(NULL, L"Error processing sine table", L"Error", MB_ICONASTERISK | MB_OK);
			return FALSE;
		}
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	case 2:
	{
		//////////////////////////////////////////////////////////////////////////
		//COSINE WAVE															//
		//////////////////////////////////////////////////////////////////////////
		CString txt;
		m_A_text.GetWindowText(txt);
		_AppSettings.WriteUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MAX_VALUE_KEY, txt);
		m_B_text.GetWindowText(txt);
		_AppSettings.WriteUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MID_VALUE_KEY, txt);
		if (ProcCosineWave(m_OutputFileName, m_Sine_max_value, m_Sine_mid_value) == FALSE) {
			::MessageBoxW(NULL, L"Error processing cosine table", L"Error", MB_ICONASTERISK | MB_OK);
			return FALSE;
		}
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	case 6:
	{
		//////////////////////////////////////////////////////////////////////////
		//VERILOG FROM BIN														//
		//////////////////////////////////////////////////////////////////////////
		CString inputfilenamepath;
		m_A_text.GetWindowText(inputfilenamepath);
		m_InputFileName = inputfilenamepath;
		_AppSettings.WriteUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_KEY_VERILOG_BIN_PATH_KEY, inputfilenamepath);
		if (ProcVerilog(m_OutputFileName, m_InputFileName, m_Binary,m_Verilog,m_16Bit, m_endian) == FALSE) {
			::MessageBoxW(NULL, L"Error processing bitmap file.", L"Error", MB_ICONASTERISK | MB_OK);
			return FALSE;
		}
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////
	}
	default:
	{
		//////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	}

	//////////////////////////////////////////////////////////////////////////
	return FALSE;
	//////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////
int CPropertyPage1::OnWizardNext(VOID)
{
	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnInitDialog(HWND hWnd,LPARAM lParam)
{
	//////////////////////////////////////////////////////////////////////////
	m_A_text_lable.Detach(); 
	m_A_text_lable.Attach(GetDlgItem(IDC_STATIC_BOX_A_TEXT));
	m_A_text.Detach();
	m_A_text.Attach(GetDlgItem(IDC_EDIT_A));
	m_A_button.Detach();
	m_A_button.Attach(GetDlgItem(IDC_BUTTON_A));
	//////////////////////////////////////////////////////////////////////////
	m_B_text_lable.Detach();
	m_B_text_lable.Attach(GetDlgItem(IDC_STATIC_BOX_B_TEXT));
	m_B_text.Detach();
	m_B_text.Attach(GetDlgItem(IDC_EDIT_B));
	m_B_button.Detach();
	m_B_button.Attach(GetDlgItem(IDC_BUTTON_B));
	//////////////////////////////////////////////////////////////////////////
	m_C_text_lable.Detach();
	m_C_text_lable.Attach(GetDlgItem(IDC_STATIC_BOX_C_TEXT));
	m_C_text.Detach();
	m_C_text.Attach(GetDlgItem(IDC_EDIT_C));
	m_C_button.Detach();
	m_C_button.Attach(GetDlgItem(IDC_BUTTON_C));
	//////////////////////////////////////////////////////////////////////////
	m_D_text_lable.Detach();
	m_D_text_lable.Attach(GetDlgItem(IDC_STATIC_BOX_D_TEXT));
	m_D_text.Detach();
	m_D_text.Attach(GetDlgItem(IDC_EDIT_D));
	m_D_button.Detach();
	m_D_button.Attach(GetDlgItem(IDC_BUTTON_D));
	//////////////////////////////////////////////////////////////////////////
	if (SetType() == FALSE) {
		return FALSE;
	}
	//////////////////////////////////////////////////////////////////////////
	SetMsgHandled(FALSE);
	//////////////////////////////////////////////////////////////////////////
	return TRUE;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
BOOL CPropertyPage1::SetType(VOID) {

	//////////////////////////////////////////////////////////////////////////
	CString txt;
	//////////////////////////////////////////////////////////////////////////
	switch (m_TableTypeId)
	{
	case 0:
	{
		//////////////////////////////////////////////////////////////////////////
		//PLANE BITMAP IMAGE													//
		//////////////////////////////////////////////////////////////////////////
		m_A_text_lable.SetWindowText(_T("Image File Path"));
		m_A_text.EnableWindow(TRUE);
		txt= _AppSettings.GetUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_KEY_PATH_KEY, TABLEGEN_REGISTRY_KEY_PATH_KEY_DEFAULT);
		m_InputFileName = txt;
		m_A_text.SetWindowText(txt);
		m_A_button.SetWindowText(_T("Select File"));
		m_A_button.EnableWindow(TRUE);
		//////////////////////////////////////////////////////////////////////////
		m_B_text_lable.SetWindowText(_T(""));
		m_B_text.EnableWindow(FALSE);
		m_B_text.SetWindowText(_T(""));
		m_B_button.SetWindowText(_T(""));
		m_B_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_C_text_lable.SetWindowText(_T(""));
		m_C_text.EnableWindow(FALSE);
		m_C_text.SetWindowText(_T(""));
		m_C_button.SetWindowText(_T(""));
		m_C_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_D_text_lable.SetWindowText(_T(""));
		m_D_text.EnableWindow(FALSE);
		m_D_text.SetWindowText(_T(""));
		m_D_button.SetWindowText(_T(""));
		m_D_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	case 1:
	{
		//////////////////////////////////////////////////////////////////////////
		//SINE WAVE																//
		//////////////////////////////////////////////////////////////////////////
		m_A_text_lable.SetWindowText(_T("Max Value"));
		m_A_text.EnableWindow(TRUE);
		txt = _AppSettings.GetUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MAX_VALUE_KEY, TABLEGEN_REGISTRY_SINE_MAX_VALUE_KEY_DEFAULT);
		m_A_text.SetWindowText(txt);
		DWORD txtlen = txt.GetLength();
		wchar_t *ptr = txt.GetBuffer(txtlen);
		wchar_t *ptr_end=(ptr+txtlen);
		m_Sine_max_value = wcstoul(ptr, &ptr_end, 10);
		txt.ReleaseBuffer();
		m_A_button.SetWindowText(_T(""));
		m_A_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_B_text_lable.SetWindowText(_T("Center Value"));
		m_B_text.EnableWindow(TRUE);
		txt = _AppSettings.GetUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MID_VALUE_KEY, TABLEGEN_REGISTRY_SINE_MID_VALUE_KEY_DEFAULT);
		m_B_text.SetWindowText(txt);
		txtlen = txt.GetLength();
		ptr = txt.GetBuffer(txtlen);
		ptr_end = (ptr + txtlen);
		m_Sine_mid_value = wcstoul(ptr, &ptr_end, 10);
		txt.ReleaseBuffer();
		m_B_text.SetWindowText(_T(""));
		m_B_button.SetWindowText(_T(""));
		m_B_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_C_text_lable.SetWindowText(_T(""));
		m_C_text.EnableWindow(FALSE);
		m_C_text.SetWindowText(_T(""));
		m_C_button.SetWindowText(_T(""));
		m_C_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_D_text_lable.SetWindowText(_T(""));
		m_D_text.EnableWindow(FALSE);
		m_D_text.SetWindowText(_T(""));
		m_D_button.SetWindowText(_T(""));
		m_D_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	case 2:
	{
		//////////////////////////////////////////////////////////////////////////
		//COSINE WAVE															//
		//////////////////////////////////////////////////////////////////////////
		m_A_text_lable.SetWindowText(_T("Max Value"));
		m_A_text.EnableWindow(TRUE);
		txt = _AppSettings.GetUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MAX_VALUE_KEY, TABLEGEN_REGISTRY_SINE_MAX_VALUE_KEY_DEFAULT);
		m_A_text.SetWindowText(txt);
		DWORD txtlen = txt.GetLength();
		wchar_t *ptr = txt.GetBuffer(txtlen);
		wchar_t *ptr_end = (ptr + txtlen);
		m_Sine_max_value = wcstoul(ptr, &ptr_end, 10);
		txt.ReleaseBuffer();
		m_A_button.SetWindowText(_T(""));
		m_A_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_B_text_lable.SetWindowText(_T("Center Value"));
		m_B_text.EnableWindow(TRUE);
		txt = _AppSettings.GetUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_SINE_MID_VALUE_KEY, TABLEGEN_REGISTRY_SINE_MID_VALUE_KEY_DEFAULT);
		m_B_text.SetWindowText(txt);
		txtlen = txt.GetLength();
		ptr = txt.GetBuffer(txtlen);
		ptr_end = (ptr + txtlen);
		m_Sine_mid_value = wcstoul(ptr, &ptr_end, 10);
		txt.ReleaseBuffer();
		m_B_text.SetWindowText(_T(""));
		m_B_button.SetWindowText(_T(""));
		m_B_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_C_text_lable.SetWindowText(_T(""));
		m_C_text.EnableWindow(FALSE);
		m_C_text.SetWindowText(_T(""));
		m_C_button.SetWindowText(_T(""));
		m_C_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_D_text_lable.SetWindowText(_T(""));
		m_D_text.EnableWindow(FALSE);
		m_D_text.SetWindowText(_T(""));
		m_D_button.SetWindowText(_T(""));
		m_D_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////
	}
	case 6:
	{
		//////////////////////////////////////////////////////////////////////////
		//VERILOG ROM FILE														//
		//////////////////////////////////////////////////////////////////////////
		m_A_text_lable.SetWindowText(_T("Binary File Path"));
		m_A_text.EnableWindow(TRUE);
		txt = _AppSettings.GetUserProfileString(TABLEGEN_REGISTRY_FILE, TABLEGEN_REGISTRY_KEY_VERILOG_BIN_PATH_KEY, TABLEGEN_REGISTRY_KEY_VERILOG_BIN_PATH_KEY_DEFAULT);
		m_InputFileName = txt;
		m_A_text.SetWindowText(txt);
		m_A_button.SetWindowText(_T("Select File"));
		m_A_button.EnableWindow(TRUE);
		//////////////////////////////////////////////////////////////////////////
		m_B_text_lable.SetWindowText(_T(""));
		m_B_text.EnableWindow(FALSE);
		m_B_text.SetWindowText(_T(""));
		m_B_button.SetWindowText(_T(""));
		m_B_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_C_text_lable.SetWindowText(_T(""));
		m_C_text.EnableWindow(FALSE);
		m_C_text.SetWindowText(_T(""));
		m_C_button.SetWindowText(_T(""));
		m_C_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		m_D_text_lable.SetWindowText(_T(""));
		m_D_text.EnableWindow(FALSE);
		m_D_text.SetWindowText(_T(""));
		m_D_button.SetWindowText(_T(""));
		m_D_button.EnableWindow(FALSE);
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////
	}
	default:
	{
		//////////////////////////////////////////////////////////////////////////
		m_A_text_lable.SetWindowText(_T(""));
		m_B_text_lable.SetWindowText(_T(""));
		m_C_text_lable.SetWindowText(_T(""));
		m_D_text_lable.SetWindowText(_T(""));
		m_A_text.EnableWindow(FALSE);
		m_A_text.SetWindowText(_T(""));
		m_B_text.EnableWindow(FALSE);
		m_B_text.SetWindowText(_T(""));
		m_C_text.EnableWindow(FALSE);
		m_C_text.SetWindowText(_T(""));
		m_D_text.EnableWindow(FALSE);
		m_D_text.SetWindowText(_T(""));
		//////////////////////////////////////////////////////////////////////////
		break;
		//////////////////////////////////////////////////////////////////////////

	}
	}

	return TRUE;

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnEnChangeEditA(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	CString txt;
	//////////////////////////////////////////////////////////////////////////
	switch (m_TableTypeId)
	{
	case 0:
	{	
		m_A_text.GetWindowText(txt);
		m_InputFileName = txt;
		break;

	}
	case 1:
	{
		m_A_text.GetWindowText(txt);
		DWORD txtlen = txt.GetLength();
		wchar_t *ptr = txt.GetBuffer(txtlen);
		wchar_t *ptr_end = (ptr + txtlen);
		m_Sine_max_value = wcstoul(ptr, &ptr_end, 10);
		txt.ReleaseBuffer();
		break;

	}
	case 6:
	{
		m_A_text.GetWindowText(txt);
		m_InputFileName = txt;
		break;

	}
	default:
	{
		break;
	}
	}
	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnEnChangeEditB(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	CString txt;
	//////////////////////////////////////////////////////////////////////////
	switch (m_TableTypeId)
	{
	case 0:
	{
		break;

	}
	case 1:
	{
		m_B_text.GetWindowText(txt);
		DWORD txtlen = txt.GetLength();
		wchar_t *ptr = txt.GetBuffer(txtlen);
		wchar_t *ptr_end = (ptr + txtlen);
		m_Sine_mid_value = wcstoul(ptr, &ptr_end, 10);
		txt.ReleaseBuffer();
		break;
	}
	default:
	{
		break;
	}
	}
	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnEnChangeEditC(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CResizablePropertyPageImpl::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here

	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnEnChangeEditD(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CResizablePropertyPageImpl::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here

	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnBnClickedButtonA(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////
	switch (m_TableTypeId)
	{
	case 0:
	{
		//////////////////////////////////////////////////////////////////////////
		//PLANE BITMAP IMAGE													//
		//////////////////////////////////////////////////////////////////////////
		CString filepath;
		if (LoadBitmapFiletWithIFileOpenDlgEx(filepath) == TRUE) {
			m_InputFileName = filepath;
		}
		m_A_text.SetWindowText(m_InputFileName);
		m_A_text.Invalidate(TRUE);
		break;
	}
	case 6:
	{
		//////////////////////////////////////////////////////////////////////////
		//VERILOG BINARY INPUT SELECT											//
		//////////////////////////////////////////////////////////////////////////
		CString filepath;
		if (LoadBinaryFiletWithIFileOpenDlgEx(filepath) == TRUE) {
			m_InputFileName = filepath;
		}
		m_A_text.SetWindowText(m_InputFileName);
		m_A_text.Invalidate(TRUE);
		break;
	}
	default:
	{
		break;
	}
	}
	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnBnClickedButtonB(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	// TODO: Add your control notification handler code here

	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnBnClickedButtonC(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	// TODO: Add your control notification handler code here

	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
LRESULT CPropertyPage1::OnBnClickedButtonD(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& bHandled)
{
	//////////////////////////////////////////////////////////////////////////
	bHandled = TRUE;
	//////////////////////////////////////////////////////////////////////////

	// TODO: Add your control notification handler code here

	//////////////////////////////////////////////////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////////////////

}
//////////////////////////////////////////////////////////////////////////
